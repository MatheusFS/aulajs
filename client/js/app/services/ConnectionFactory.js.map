{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Q;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B;AAAA,uCAAKT,kBAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,6BAA9B;AACAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAAE,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AAA+D,qCAAhG;AACH;AACDE,wCAAQL,UAAR;AACH,6BAPD;AAQAO,wCAAYW,OAAZ,GAAsB;AAAA,uCAAKZ,OAAOO,EAAEC,MAAF,CAASK,IAAhB,CAAL;AAAA,6BAAtB;AACH,yBAdM,CAAP;AAeH;;;kDAEoBnB,U,EAAY;;AAE7BH,+BAAOuB,OAAP,CAAe,iBAAS;;AAEpB,gCAAIpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;;AAE7CvB,2CAAWwB,iBAAX,CAA6BD,KAA7B;AACH;;AAEDvB,uCAAWyB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBARD;AASH;;;sDAEwB;;AAErB,4BAAI1B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName = 'aulajs';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n\r\n        throw new Error('Não é possível instânciar ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () { throw new Error('Você não pode fechar diretamente a conexão') };\r\n                }\r\n                resolve(connection);\r\n            };\r\n            openRequest.onerror = e => reject(e.target.name);\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) {\r\n\r\n                connection.deleteObjectStore(store);\r\n            }\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}