{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,QAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B;AAAA,+BAAKd,kBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,qBAA9B;AACAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAAC,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AAA8D,6BAA7F;AACH;AACDE,gCAAQJ,UAAR;AACH,qBAPD;AAQAM,gCAAYW,OAAZ,GAAsB;AAAA,+BAAKZ,OAAOO,EAAEC,MAAF,CAASK,IAAhB,CAAL;AAAA,qBAAtB;AACH,iBAdM,CAAP;AAeH;AAxBL;AAAA;AAAA,0CA0ByBlB,UA1BzB,EA0BqC;;AAE7BH,uBAAOsB,OAAP,CAAe,iBAAS;;AAEpB,wBAAInB,WAAWoB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;;AAE7CtB,mCAAWuB,iBAAX,CAA6BD,KAA7B;AACH;;AAEDtB,+BAAWwB,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBARD;AASH;AArCL;AAAA;AAAA,8CAuC4B;;AAEpB,oBAAGzB,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA7CL;;AAAA;AAAA;AA+CH,CAxDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 3;\r\n    const dbName = 'aulajs';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n\r\n            throw new Error('Não é possível instânciar ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function (){throw new Error('Você não pode fechar diretamente a conexão')};\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                openRequest.onerror = e => reject(e.target.name);\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n\r\n                if (connection.objectStoreNames.contains(store)) {\r\n\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}